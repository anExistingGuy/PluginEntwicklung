namespace PatterNicer
{
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.Text;
    using Microsoft.VisualStudio.ComponentModelHost;
    using Microsoft.VisualStudio.LanguageServices;
    using Microsoft.VisualStudio.OLE.Interop;
    using Microsoft.VisualStudio.Shell;
    using Microsoft.VisualStudio.Shell.Interop;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Windows;
    using System.Windows.Controls;

    /// <summary>
    /// Interaction logic for MainWindowControl.
    /// </summary>
    public partial class MainWindowControl : UserControl
    {
        public enum NameCase
        {
            camelCase = 0,
            PascalCase = 1
        }

        /* Binding Enum property to ComboBox
         * user659130 @ https://stackoverflow.com/questions/58743/databinding-an-enum-property-to-a-combobox-in-wpf
        */
        public NameCase VariableNameCase { get; set; }
        public NameCase PropertyNameCase { get; set; }
        public NameCase MethodNameCase { get; set; }

        public IEnumerable<NameCase> NameCaseValues {
            get
            {
                return Enum.GetValues(typeof(NameCase)).Cast<NameCase>();
            }
        }

        public ObservableCollection<Project> Projects { get; set; }

        private Project selectedProject;
        public Project SelectedProject
        {
            get { return selectedProject; }
            set
            {
                selectedProject = value;

                /* Reset all the collections so no references 
                 * to other project's document remain in lists 
                 */
                DocumentsUnassigned.Clear();
                DocumentsModel.Clear();
                DocumentsView.Clear();
                DocumentsViewModel.Clear();
                DocumentsSingleton.Clear();
                DocumentsNonSingleton.Clear();

                if (selectedProject != null)
                {
                    List<Document> documentsFiltered = new List<Document>();

                    /* Filter out non-CSharp files, 
                     * autogenerated files and temporary files 
                     */
                    foreach (Document d in selectedProject.Documents)
                    {
                        if (
                            d.Name.EndsWith(".cs")
                            && !d.Name.EndsWith(".g.cs") 
                            && !d.Name.EndsWith(".Designer.cs")
                            && !d.Name.EndsWith(".AssemblyAttributes.cs")
                            && !d.Name.StartsWith("TemporaryGeneratedFile_")
                            && !d.Name.Equals("AssemblyInfo.cs")
                            )
                        {
                            documentsFiltered.Add(d);
                        }
                    }

                    // Safe filtered list of documents for later use
                    AllDocuments = documentsFiltered;

                    /* Put filtered list of documents into Unassigned-List 
                     * in MVVM Tab and into NonSingleton-List in Singleton Tab
                     */
                    foreach (Document d in documentsFiltered)
                    {
                        DocumentsUnassigned.Add(d);
                        DocumentsNonSingleton.Add(d);
                    }
                }
            }
        }

        public List<Document> AllDocuments { get; set; }

        // Collections for ListBoxes in MVVM tab 
        public ObservableCollection<Document> 
            DocumentsUnassigned { get; set; }

        public ObservableCollection<Document> 
            DocumentsModel { get; set; }

        public ObservableCollection<Document> 
            DocumentsView { get; set; }

        public ObservableCollection<Document> 
            DocumentsViewModel { get; set; }

        // Collections for ListBoxes in Singleton tab
        public ObservableCollection<Document> 
            DocumentsSingleton { get; set; }

        public ObservableCollection<Document> 
            DocumentsNonSingleton { get; set; }

        /* Since UI-Elements lose focus as soon as a button in the UI 
         * is clicked, a reference to the last focused ListBox 
         * in each tab must be safed in order
         * to know from which ListBox to which ListBox to move items.
         */
        private ListBox lastFocusedListBoxMVVM;
        private ListBox lastFocusedListBoxSingleton;

        /// <summary>
        /// Initializes a new instance of the <see cref="MainWindowControl"/> class.
        /// </summary>
        public MainWindowControl()
        {
            this.InitializeComponent();

            Projects = new ObservableCollection<Project>();

            DocumentsUnassigned = new ObservableCollection<Document>();
            DocumentsModel = new ObservableCollection<Document>();
            DocumentsView = new ObservableCollection<Document>();
            DocumentsViewModel = new ObservableCollection<Document>();

            DocumentsSingleton = new ObservableCollection<Document>();
            DocumentsNonSingleton = new ObservableCollection<Document>();

            // Get reference to componentModel and VS-Workspace
            IComponentModel componentModel = 
                (IComponentModel)Package.
                GetGlobalService(typeof(SComponentModel));

            var workspace = 
                componentModel.
                GetService<VisualStudioWorkspace>();

            // List all projects found in current Solution opened in VS
            var projects = workspace.CurrentSolution.Projects;
            foreach (Project p in projects)
            {
                this.Projects.Add(p);
            }

            // Set the UI's DataContext to this class just in case
            DataContext = this;
        }

        // Checks SelectedProject by the conditions selected in UI
        [SuppressMessage(
            "Microsoft.Globalization", 
            "CA1300:SpecifyMessageBoxOptions", 
            Justification = "Sample code")]
        [SuppressMessage(
            "StyleCop.CSharp.NamingRules", 
            "SA1300:ElementMustBeginWithUpperCaseLetter", 
            Justification = "Default event handler naming pattern")]
        private void CheckProject(object sender, RoutedEventArgs e)
        {
            // Clear errors from previous check
            ErrorReporter.ClearErrors();

            // Checks LineLength if corresponding CheckBox in UI is checked
            if ((bool)checkBox_LineLength.IsChecked)
            {
                new Controller.LineLengthController().
                    CheckLineLength(AllDocuments, 
                    int.Parse(textBox_lengthLines.Text));
            }

            /* Checks naming of variables, properties, methods, 
             * classes and namespaces
             * if corresponding CheckBoxes in UI are checked;
             * variables, properties and methods can contain 
             * user-specified special characters
             * and the user can specify whether to 
             * check for camelCase or PascalCase
             */
            if ((bool)checkBox_Naming.IsChecked)
            {
                bool checkMethods = (bool)checkBox_methods.IsChecked;
                List<string> permittedStringsMethods = 
                    SplitString(textBox_specialCharsMethods.Text);
                
                bool checkVariables = (bool)checkBox_variables.IsChecked;
                List<string> permittedStringsVariables =
                    SplitString(textBox_specialCharsVariables.Text);
                
                bool checkProperties = (bool)checkBox_properties.IsChecked;
                List<string> permittedStringsProperties =
                    SplitString(textBox_specialCharsProperties.Text);
                
                bool checkClasses = (bool)checkBox_classes.IsChecked;
                bool checkNamespaces = (bool)checkBox_namespaces.IsChecked;

                /* Checks, for whichever desired, naming of 
                 * methods, variables, properties, classes and namespaces. 
                 */
                new Controller.NamingController().CheckNaming
                    (
                    documents: AllDocuments,
                    permittedMethods: permittedStringsMethods,
                    permittedVariables: permittedStringsVariables,
                    permittedProperties: permittedStringsProperties,
                    isMethodChecked:checkMethods,
                    isVariableChecked:checkVariables,
                    isPropertyChecked:checkProperties,
                    isClassChecked:checkClasses,
                    isNamespaceChecked:checkNamespaces,
                    nameCaseMethod:MethodNameCase,
                    nameCaseVariable:VariableNameCase,
                    nameCaseProperty:PropertyNameCase
                    );
            }

            /* Checks project for unused imports if 
             * corresponding CheckBox in UI is checked 
             */
            if ((bool)checkBox_imports.IsChecked)
            {
                new Controller.ImportsUsedController().
                    CheckImports(AllDocuments);
            }

            /* Checks project for MVVM if corresponding CheckBox 
             * in UI is checked based on which Documents 
             * the user assigned to which ListBox in the MVVM tab
             */
            if ((bool)checkBox_MVVM.IsChecked)
            {
                bool checkCodeBehind = 
                    (bool)checkBox_EmptyCodeBehind.IsChecked;

                new Controller.MVVMConntroller().CheckMVVM
                    (
                    project:selectedProject,
                    modelDocuments:DocumentsModel,
                    viewDocuments:DocumentsView,
                    viewmodelDocuments:DocumentsViewModel,
                    checkCodeBehind:checkCodeBehind
                    );
            }
            
            /* Checks the Documents the user defined as containing a 
             * Singleton class for whether that Singleton class is valid 
             * if corresponding CheckBox in UI is checked
             * and further checks, if that CheckBox is checked, 
             * for thread safety in terms of 
             * double check locking or usage of the Lazy<T> class
             */
            if ((bool)checkBox_Singleton.IsChecked)
            {
                bool checkThreadSafety = 
                    (bool)checkBox_SingletonThreadSafety.IsChecked;

                new Controller.SingletonController().
                    CheckSingleton(SelectedProject, 
                    DocumentsSingleton, 
                    checkThreadSafety);
            }
        }

        // Refreshes list of projects
        private void RefreshWorkspace(object sender, RoutedEventArgs e)
        {
            IComponentModel componentModel = 
                (IComponentModel)Package
                .GetGlobalService(typeof(SComponentModel));

            var workspace = 
                componentModel.
                GetService<VisualStudioWorkspace>();

            // Clear errors added by CheckProject
            ErrorReporter.ClearErrors();

            var projects = workspace.CurrentSolution.Projects;

            this.Projects.Clear();
            foreach (Project p in projects)
            {
                this.Projects.Add(p);
            }
        }

        // Method to move items between ListBoxes in MVVM tab
        private void MoveItem(object sender, RoutedEventArgs e)
        {
            ObservableCollection<Document> targetCollection;
            ObservableCollection<Document> sourceCollection;

            /* Determine which collection to 
             * move item to by which button was pressed 
             */
            if (sender == button_ToModel)
            {
                targetCollection = DocumentsModel;
            }
            else if (sender == button_ToView)
            {
                targetCollection = DocumentsView;
            }
            else if (sender == button_ToVM)
            {
                targetCollection = DocumentsViewModel;
            }
            else
            {
                targetCollection = null;
            }

            /* Determine which collection to
             * move item from by which ListBox was last focused 
             */
            if (lastFocusedListBoxMVVM == listBox_Items)
            {
                sourceCollection = DocumentsUnassigned;
            }
            else if (lastFocusedListBoxMVVM == listBox_Model)
            {
                sourceCollection = DocumentsModel;
            }
            else if (lastFocusedListBoxMVVM == listBox_View)
            {
                sourceCollection = DocumentsView;
            }
            else if (lastFocusedListBoxMVVM == listBox_ViewModel)
            {
                sourceCollection = DocumentsViewModel;
            }
            else
            {
                sourceCollection = null;
            }

            /* Add item to targetCollection and remove it 
             * from sourceCollection, effectively moving it 
             */
            if (targetCollection != null && sourceCollection != null)
            {
                if (lastFocusedListBoxMVVM.SelectedItem != null)
                {
                    targetCollection.
                        Add((Document)lastFocusedListBoxMVVM.SelectedItem);

                    sourceCollection.
                        Remove((Document)lastFocusedListBoxMVVM.SelectedItem);
                }
            }
        }

        // Method to swap items between ListBoxes in Singleton tab
        private void SwapItem(object sender, RoutedEventArgs e)
        {
            if(lastFocusedListBoxSingleton != null)
            {
                if(lastFocusedListBoxSingleton.SelectedItem != null)
                {
                    /* Move selected item in last selected ListBox 
                     * in Singleton tab to the other one 
                     */
                    if (lastFocusedListBoxSingleton == listBox_NonSingleton)
                    {
                        DocumentsSingleton.
                            Add(
                            (Document)lastFocusedListBoxSingleton.
                            SelectedItem);

                        DocumentsNonSingleton.
                            Remove(
                            (Document)lastFocusedListBoxSingleton.
                            SelectedItem);
                    }
                    else if (lastFocusedListBoxSingleton == listBox_Singleton)
                    {
                        DocumentsNonSingleton.
                            Add(
                            (Document)lastFocusedListBoxSingleton.
                            SelectedItem);

                        DocumentsSingleton.
                            Remove(
                            (Document)lastFocusedListBoxSingleton.
                            SelectedItem);
                    }
                }
            }
        }

        /* Method that is called by ListBoxes whenever they get focus to 
         * safe that ListBox as last selected for MoveItem and SwapItem 
         */
        private void ShiftFocus(object sender, RoutedEventArgs e)
        {
            ListBox listBox = sender as ListBox;

            /* If listBox is located in MVVM tab, 
             * save reference to it in lastFocusedListBoxMVVM 
             */
            if (listBox == listBox_Items || 
                listBox == listBox_Model || 
                listBox == listBox_View || 
                listBox == listBox_ViewModel)
            {
                lastFocusedListBoxMVVM = sender as ListBox;
            }

            /* Else it must be located in Singleton tab, 
             * so save reference to it in lastFocusedListBoxSingleton 
             */
            else if (listBox == listBox_NonSingleton || 
                listBox == listBox_Singleton)
            {
                lastFocusedListBoxSingleton = listBox;
            }
        }

        /* Method that generates list of allowed 
         * combinations of special characters for
         * variable, property and method naming
         */
        private List<string> SplitString(string input)
        {
            List<string> res = new List<string>();

            string[] substrings = input.Split(' ');

            foreach (string s in substrings)
            {
                /* Calling Trim() on each string is redundant 
                 * but let's do it for safety 
                 */
                res.Add(s.Trim());
            }

            return res;
        }
    }
}